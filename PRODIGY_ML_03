import os
import random
import cv2
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

# Set the path to your Kaggle Cats and Dogs dataset
dataset_path = '/path/to/kaggle/dataset'

# Function to load and preprocess images
def load_images(dataset_path):
    images = []
    labels = []

    for category in os.listdir(dataset_path):
        category_path = os.path.join(dataset_path, category)

        for filename in os.listdir(category_path):
            img_path = os.path.join(category_path, filename)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (150, 150))  # Resize images for consistency
            images.append(img)
            labels.append(category)

    return np.array(images), np.array(labels)

# Load and preprocess images
images, labels = load_images(dataset_path)

# Encode labels
label_encoder = LabelEncoder()
labels = label_encoder.fit_transform(labels)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

# Normalize pixel values to be between 0 and 1
X_train, X_test = X_train / 255.0, X_test / 255.0

# Build and train the SVM model using a pre-trained CNN feature extractor (e.g., MobileNetV2)
base_model = tf.keras.applications.MobileNetV2(input_shape=(150, 150, 3), include_top=False)
base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))

# Evaluate the model
y_pred = (model.predict(X_test) > 0.5).astype("int32")
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print(classification_report(y_test, y_pred))
