# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate some example data (replace this with your actual dataset)
np.random.seed(42)
num_samples = 100
square_footage = np.random.uniform(1000, 3000, num_samples)
num_bedrooms = np.random.randint(1, 5, num_samples)
num_bathrooms = np.random.randint(1, 4, num_samples)
house_prices = 50000 + 300 * square_footage + 20000 * num_bedrooms + 15000 * num_bathrooms + np.random.normal(0, 10000, num_samples)

# Create a DataFrame with the generated data
data = pd.DataFrame({
    'SquareFootage': square_footage,
    'Bedrooms': num_bedrooms,
    'Bathrooms': num_bathrooms,
    'Price': house_prices
})

# Split the data into features (X) and target variable (y)
X = data[['SquareFootage', 'Bedrooms', 'Bathrooms']]
y = data['Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Visualize the predictions vs. actual prices
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs. Predicted Prices')
plt.show()
